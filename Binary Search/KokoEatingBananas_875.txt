--Optimized O(log n), O(1)
class Solution {
    public int minEatingSpeed(int[] piles, int h) {
        int max = max(piles);
        int left = 1; int right = max;
        int min = Integer.MAX_VALUE;
        while(left <= right){
            int mid = (left + right) / 2;

            int total = totalHours(piles, mid);
            if(total <= h){
                min = mid;
                right = mid - 1;
            }else{
                left = mid + 1;
            }
        }

        return left;
    }

    public static int totalHours(int[] piles, int hourly){
        int totalHours = 0;
        for(int i = 0; i <= piles.length - 1; i++){
            totalHours += Math.ceil((double)piles[i]/(double)hourly);
        }

        return totalHours;
    }

    public static int max(int[] piles){
        int max = 0;
        for(int i = 0; i <= piles.length - 1; i++){
            if(piles[i] > max){
                max = piles[i];
            }
        }

        return max;
    }
}