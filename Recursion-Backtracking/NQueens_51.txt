--Optimized O(n!), O(n)
class Solution {
    public List<List<String>> solveNQueens(int n) {
        char[][] board = new char[n][n];
        List<List<String>> res = new ArrayList<>();

        for(char[] row : board){
            Arrays.fill(row, '.');
        }

        Set<Integer> cols = new HashSet<>();
        Set<Integer> diag1 = new HashSet<>(); // main diagnal row - col
        Set<Integer> diag2 = new HashSet<>(); // anti diagnal row + col

        backtrack(0, board, cols, diag1, diag2, res);

        return res;
    }

    public void backtrack(int row, char[][] board, Set<Integer> cols, Set<Integer> diag1, Set<Integer> diag2, List<List<String>> res){
        int n = board.length;
        if(row == n){
            res.add(construct(board));           
            return;
        }

        for(int col = 0; col < n; col++){            
            if(cols.contains(col) || diag1.contains(row - col) || diag2.contains(row + col)){
                continue;
            }

            board[row][col] = 'Q';
            cols.add(col);
            diag1.add(row-col);
            diag2.add(row+col);

            backtrack(row + 1, board, cols, diag1, diag2, res);

            //backtrack
            board[row][col] = '.';
            cols.remove(col);
            diag1.remove(row-col);
            diag2.remove(row+col);
        }
        
    }

    public List<String> construct(char[][] board){
        List<String> path = new ArrayList<>();

        for(char[] row : board){
            path.add(new String(row));
        }

        return path;
    }
}