// O(2^t * k), O(k*x) where t  is target, k is average length, x is the no. of combinations
class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        
        findSubsetsSum(0, candidates, target, new ArrayList<Integer>(), res);

        return res;
    }

    public void findSubsetsSum(int i, int[] cans, int tar, List<Integer> arr, List<List<Integer>> res){
        if(i == cans.length){
            if(tar == 0){
                res.add(new ArrayList<>(arr));
            }
            
            return;
        }

        if(cans[i] <= tar){
            arr.add(cans[i]);
            findSubsetsSum(i, cans, tar - cans[i], arr, res);
            arr.remove(arr.size() - 1);
        }
        findSubsetsSum(i+1, cans, tar, arr, res);
    }
}