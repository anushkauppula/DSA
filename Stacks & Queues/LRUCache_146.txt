// O(n), O(1)
class LRUCache {

    Map<Integer, Node> map = new HashMap<>();
    int capacity = 0; Node head = new Node(-1, -1); Node tail = new Node(-1, -1);

    public LRUCache(int capacity) {
        this.capacity = capacity;
        map.clear();
        head.next = tail;
        tail.prev = head;
    }
    
    public int get(int key) {
        if(!map.containsKey(key)) return -1;
        Node node = map.get(key);
        deleteNode(node);
        insertNode(node);
        return node.value;
    }
    
    public void put(int key, int value) {
        if(map.containsKey(key)){
            deleteNode(map.get(key));
        }

        if(map.size() == capacity){
            deleteNode(tail.prev);
        }
        insertNode(new Node(key, value));
    }

    public void deleteNode(Node node){
        map.remove(node.key);
        node.next.prev = node.prev;
        node.prev.next = node.next;
    }

    public void insertNode(Node node){ 
        map.put(node.key, node);
        node.next = head.next;        
        node.prev = head;
        head.next = node;
        node.next.prev = node;
    }
}

class Node{
    int key, value;
    Node prev, next;
    public Node(int key, int value){
        this.key = key;
        this.value = value;
        prev = null;
        next = null;
    }

    public Node(int key, int value, Node prev, Node next){
        this.key = key;
        this.value = value;
        this.prev = prev;
        this.next = next;
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */