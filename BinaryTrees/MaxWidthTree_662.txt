/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
// O(n), O(n)
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        int max = 0;
        Queue<Pair<TreeNode, Integer>> q = new LinkedList<>();

        q.offer(new Pair<>(root, 0));

        while(!q.isEmpty()){
            int size = q.size();
            int minIndex = q.peek().getValue();
            int first = 0, last = 0;

            for(int i = 0; i < size; i++){
                Pair<TreeNode, Integer> current = q.poll();
                TreeNode node = current.getKey();
                int index = current.getValue() - minIndex;

                if(i == 0) first = index;
                if(i == size - 1) last = index;

                if(node.left != null){
                    q.offer(new Pair<>(node.left, index * 2));
                }

                if(node.right != null){
                    q.offer(new Pair<>(node.right, index * 2 + 1));
                }
            }

            max = Math.max(max, last - first + 1);
        }

        return max;
    }
}