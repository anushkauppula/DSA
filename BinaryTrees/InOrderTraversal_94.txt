/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
// O(n), O(n) -- Recursive
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        traverse(root, res);
        return res;
    }

    public void traverse(TreeNode root, List<Integer> res){
        if(root == null){
            return;
        }

        traverse(root.left, res);
        res.add(root.val);
        traverse(root.right, res);
    }
}

// O(n), O(n) -- Iterative
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        
        Stack<TreeNode> st = new Stack<>();
        TreeNode node = root;

        while(true){
            if(node != null){
                st.push(node);

                node = node.left;
            }else{

                if(st.isEmpty()){
                    break;
                }

                node = st.peek();
                st.pop();

                res.add(node.val);

                node = node.right;
            }
        }

        return res;
    }
}