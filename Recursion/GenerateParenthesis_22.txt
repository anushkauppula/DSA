-- Optimized O(2^n), O(n)
class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> res = new ArrayList<String>();
        reverse(res, 0, 0, "", n);

        return res;
    }

    public void reverse(List<String> res, int open, int close, String s, int n){
        if(s.length() == n * 2){
            res.add(s);
            return;
        }

        if(open < n){
            reverse(res, open+1, close, s + "(", n);
        }

        if(close < open){
            reverse(res, open, close + 1, s + ")", n);
        }
    }
}