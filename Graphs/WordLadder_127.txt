// O(n * L * 26), O(n)
class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Set<String> wordSet = new HashSet<>(wordList);

        if(!wordList.contains(endWord)) return 0;

        Queue<String> q = new LinkedList<>();
        q.offer(beginWord);

        int steps = 1;

        while(!q.isEmpty()){
            int size = q.size();
            for(int i = 0; i < size; i++){
                String word = q.poll();
                if(word.equals(endWord)) return steps;

                char[] arr = word.toCharArray();

                for(char j = 0; j < arr.length; j++){
                    char original = arr[j];
                    for(char c = 'a'; c <= 'z'; c++){
                        if(c == original) continue;
                        arr[j] = c;

                        String newWord = new String(arr);
                        if(wordSet.contains(newWord)){
                            q.offer(newWord);
                            wordSet.remove(newWord);
                        }
                    }
                    arr[j] = original;
                }
            }
            steps++;
        }

        return 0;
    }
}