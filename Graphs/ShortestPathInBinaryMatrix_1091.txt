// O(n^2), O(n^2)
class Solution {
    public int shortestPathBinaryMatrix(int[][] grid) {
        int n = grid.length;

        if(grid[0][0] != 0 || grid[n-1][n-1] != 0){
            return -1;
        }

        int[][] directions = {
            {1, 0}, {-1, 0}, {0, 1}, {0, -1},
            {1, 1}, {1, -1}, {-1, 1}, {-1, -1}
        };

        Queue<int[]> q = new LinkedList<>();
        q.add(new int[]{ 0, 0, 1});
        grid[0][0] = 1;

        while(!q.isEmpty()){
            int[] cur = q.poll();
            int r = cur[0], c = cur[1], dist = cur[2];

            if(r == n-1 && c == n-1){
                return dist;
            }

            for(int[] d: directions){
                int nr = r + d[0], nc = c + d[1];

                if(nr >= 0 && nc >= 0 && nr < n && nc < n && grid[nr][nc] == 0){
                    q.add(new int[]{ nr, nc, dist + 1});
                    grid[nr][nc] = 1;
                }
            }
        }

        return -1;
    }
}