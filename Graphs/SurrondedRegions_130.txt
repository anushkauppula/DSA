//DFS O(m*n), O(m*n)
class Solution {
    public void solve(char[][] board) {
        if(board == null) return;
        int rows = board.length; int cols = board[0].length;

        for(int r = 0; r < rows; r++){
            dfs(board, r, 0);
            dfs(board, r, cols - 1);
        }

        for(int c = 0; c < cols; c++){
            dfs(board, 0, c);
            dfs(board, rows - 1, c);
        }

        for(int r = 0; r < rows; r++){
            for(int c = 0; c < cols; c++){
                if(board[r][c] == 'O'){
                    board[r][c] = 'X';
                }
                else if(board[r][c] == '#'){
                    board[r][c] = 'O';
                }
            }
        }
    }

    public void dfs(char[][] board, int r, int c){
        if(r < 0 || c < 0 || r >= board.length || c >= board[0].length){
            return;
        }

        if(board[r][c] != 'O') return;

        board[r][c] = '#';

        dfs(board, r - 1, c);
        dfs(board, r + 1, c);
        dfs(board, r, c - 1);
        dfs(board, r, c + 1);
    }
}

//BFS O(m*n), O(m*n)
class Solution {
    public void solve(char[][] board) {
        if(board == null) return;
        int rows = board.length; int cols = board[0].length;
        Queue<int[]> q = new LinkedList<>();

        for(int r = 0; r < rows; r++){
            if(board[r][0] == 'O'){
                q.offer(new int[]{ r, 0});
            }

            if(board[r][cols-1] == 'O'){
                q.offer(new int[]{ r, cols-1});
            }
        }

        for(int c = 0; c < cols; c++){
           if(board[0][c] == 'O'){
                q.offer(new int[] { 0, c});
           }

           if(board[rows-1][c] == 'O'){
                q.offer(new int[] { rows - 1, c});
           }
        }

        int[][] directions = new int[][]{{1, 0}, {-1, 0}, {0, 1}, {0, -1}};

        while(!q.isEmpty()){
            int[] cur = q.poll();
            int r = cur[0]; int c = cur[1];

            if(r < 0 || c < 0 || r >= rows || c >= cols || board[r][c] != 'O') continue;
            board[r][c] = '#';

            for(int[] d : directions){
                q.offer(new int[] { r + d[0], c + d[1]});
            }
        }

        for(int r = 0; r < rows; r++){
            for(int c = 0; c < cols; c++){
                if(board[r][c] == 'O'){
                    board[r][c] = 'X';
                }
                else if(board[r][c] == '#'){
                    board[r][c] = 'O';
                }
            }
        }
    }
}