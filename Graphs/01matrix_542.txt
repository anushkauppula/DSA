// O(m*n), O(m*n)
class Solution {
    public int[][] updateMatrix(int[][] mat) {
        int rows = mat.length; int cols = mat[0].length;
        Queue<int[]> q = new LinkedList<>();

        int[][] dist = new int[rows][cols];

        for(int r = 0; r < rows; r++){
            for(int c = 0; c < cols; c++){
                if(mat[r][c] == 0){
                    dist[r][c] = 0;
                    q.offer(new int[]{r, c});
                }else{
                    dist[r][c] = -1;
                }
            }
        }

        int[][] directions = new int[][]{ {1, 0}, {-1, 0}, {0, 1}, {0, -1}};

        while(!q.isEmpty()){
            int[] cur = q.poll();
            int r = cur[0], c = cur[1];

            for(int[] d : directions){
                int nr = r + d[0], nc = c + d[1];

                if(nr >= 0 && nr < rows && nc >= 0 && nc < cols
                    && dist[nr][nc] == -1){
                        dist[nr][nc] = dist[r][c] + 1;
                        q.offer(new int[] { nr, nc });
                    }
            }
        }

        return dist;
    }
}