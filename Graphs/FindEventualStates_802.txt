// O(V+E), O(V+E)
class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        int n = graph.length;

        List<List<Integer>> revGraph = new ArrayList<>();

        for(int i = 0; i < n; i++){
            revGraph.add(new ArrayList<>());
        }

        int[] outdegree = new int[n];

        for(int u = 0; u < n; u++){
            for(int v : graph[u]){
                revGraph.get(v).add(u);
            }

            outdegree[u] = graph[u].length;
        }

        Queue<Integer> q = new LinkedList<>();

        for(int i = 0; i < n; i++){
            if(outdegree[i] == 0){
                q.offer(i);
            }
        }

        boolean[] safe = new boolean[n];
        while(!q.isEmpty()){
            int node = q.poll();
            safe[node] = true;
            for(int prev : revGraph.get(node)){
                outdegree[prev]--;
                if(outdegree[prev] == 0){
                    q.offer(prev);
                }
            }
        }

        List<Integer> result = new ArrayList<>();

        for(int i = 0; i < n; i++){
            if(safe[i]) result.add(i);
        }

        return result;
    }
}