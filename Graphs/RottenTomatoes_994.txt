// O(m*n), O(m*n)
class Solution {
    public int orangesRotting(int[][] grid) {
        int rows = grid.length;
        int cols = grid[0].length;

        int fresh = 0;
        Queue<int[]> q = new LinkedList<>();

        for(int row = 0; row < rows; row++)
        {
            for(int col = 0; col < cols; col++){
                if(grid[row][col] == 2){
                    q.offer(new int[]{ row, col, 0});
                }
                
                if(grid[row][col] == 1){
                    fresh++;
                }
            }
        }

        int minutes = 0;
        int[][] directions = new int[][]{ {1, 0}, {-1, 0}, {0, 1}, {0, -1} };

        while(!q.isEmpty()){
            int[] cur = q.poll();
            int r = cur[0]; int c = cur[1]; int t = cur[2];
            minutes = Math.max(minutes, t);
            for(int[] d: directions){
                int nr = r + d[0];
                int nc = c + d[1];

                if(nr >= 0 && nr < rows && nc >=0 && nc < cols
                    && grid[nr][nc] == 1){
                        grid[nr][nc] = 2;
                        fresh--;
                        q.offer(new int[]{ nr, nc, t  + 1 });
                    }
            }
        }

        return fresh == 0 ? minutes: -1;
    }
}