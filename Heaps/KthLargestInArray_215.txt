//O(n logn), O(n)
class Solution {
    public int findKthLargest(int[] nums, int k) {
        PriorityQueue<Integer> p = new PriorityQueue<>((a,b)->b-a);
        
        for(int i = 0; i < nums.length; i++){
            p.add(nums[i]);
        }

        int r = k-1;
        while(r > 0){
            p.remove();
            r--;
        }

        return p.peek();
    }
}

// O(n logk), O(k)
class Solution {
    public int findKthLargest(int[] nums, int k) {
        PriorityQueue<Integer> p = new PriorityQueue<>();
        
        for(int i = 0; i < nums.length; i++){
            p.add(nums[i]);
            
            if(p.size() > k){
                p.poll();
            }
        }


        return p.peek();
    }
}