/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

--Optimized O(n), O(1)
class Solution {
    public boolean isPalindrome(ListNode head) {
        if(head == null || head.next == null) { return true;}
        //find middle of linked list
        ListNode slow = head; ListNode fast = head;
        while(fast != null && fast.next != null){
            slow = slow.next; 
            fast = fast.next.next;
        }

        //reverse
        ListNode temp = reverse(slow);
        //compare first and second
        ListNode first = head; ListNode second = temp;

        while(second != null){
            if(first.val != second.val){   
               reverse(temp);
               return false;
            }

            first = first.next;
            second = second.next;            
        }
        reverse(temp);
        return true;
    }

    public static ListNode reverse(ListNode head){
        ListNode prev = null;
        while(head != null){
            ListNode copy = head.next;
            head.next = prev;
            prev = head;
            head = copy;
        }
        return prev;
    }
}