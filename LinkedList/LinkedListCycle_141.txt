/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */

-- Hashing O(n), O(n), for some test cases this doesn't work. so optimized code is also included for better space complexity

public class Solution {
    public boolean hasCycle(ListNode head) {
        HashSet<Integer> set = new HashSet<>();
 
        if(head == null || head.next == null){
            return false;
        }
 
        while(head != null){
            if(set.contains(head.val)){
               return true;
            }
            set.add(head.val);
            head = head.next;
        }
 
        return false;
    }
}

-- Optimized O(n), O(1)
public class Solution {
    public boolean hasCycle(ListNode head) {
        ListNode slow = head; ListNode fast = head;

        while(fast != null && fast.next != null)
        {
            slow = slow.next;
            fast = fast.next.next;
            
            if(slow == fast){
                return true;
            }
        }

        return false;

    }
}