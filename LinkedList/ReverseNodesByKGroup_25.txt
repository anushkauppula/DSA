/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
-- Optimized O(n), O(1)
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode temp = head;  ListNode nextNode = null; ListNode prevNode = null;
        while(temp != null){
            ListNode kthNode = findkthNode(temp, k);

            if(kthNode == null){
                if(prevNode !=null){
                    prevNode.next = temp;
                }

                break;
            }

            nextNode = kthNode.next;
            kthNode.next = null;
            kthNode = reverse(temp);
            
            if(temp == head){
                head = kthNode;
            }
            else{
                prevNode.next = kthNode;
            }

            prevNode = temp;
            temp = nextNode;
        }

        return head;
    }

    public static ListNode reverse(ListNode temp){
        ListNode prev = null;
        
        while(temp != null){
            ListNode front = temp.next;
            temp.next = prev;
            prev = temp;
            temp = front;
        }
        return prev;
    }

    public static ListNode findkthNode(ListNode temp, int k){
        k--;

        while(temp != null && k > 0){
            k--;
            temp = temp.next;
        }

        return temp;        
    }
}